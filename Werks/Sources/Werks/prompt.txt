This is a board game called "locomotive werks". 
This game will be written using Swift.

The game board is made up of 14 spaces in linear sequential order.
The game has 43 cards.
The game has 3-5 players.
Each player can own 0, 1 or multiple cards in their hand.

The Werks-board.csv file lists all 14 locomotives in the game.
The Werks-cards.csv file lists all 43 cards in the game.

A visual has been provided, board.jpg; it shows each board space (represented in rows).

Each board space (row) has this information;

Name, Color, Generation, Cost (the cost to design the locomotive), Production Cost, income, how many cards, existing orders (which is the series of boxes on the left of the image), customer base (which is the series of boxes on the right of the image), initial orders which is always an integer starting at 0.

Both existing orders and customer base boxes will always be equal, and can be empty, or have some dice numbers (representing orders).

---

Understanding board.csv

Where pool, this is how many exists of that locomotive, and its also used to say how many cards there are.
Where max dice refers to the maximum amount of dice that existing orders and customer base total (ie: existing orders + customer base can never exceed this number)

---

The board could be described as a collection of spaces thusly;

[space] -> [space] -> [space], etc.

Where each space is ordered by cost ascending.
This order never changes, and is always in this linear sequential order.

Space:
----------
1) SpaceID: <Int>
2) LocomotiveID: <Int>
3) LocomotiveName: <String>
4) Color: <Color: Int>
5) Generation: <Generation: Int>
6) Cost: <Cost: Int> (to design the locomotive)
7) Production Cost: <ProductionCost: Int>
8) Income: <Income: Int>
9) Pool: <Int>
10) MaxDice: <Int>
11) InitialOrders: <Int>
12) ExistingOrders: [Int]
13) CustomerBase: [Int]
14) Status: <Enum: Int { inactive, active }>
15) Cards: [Cards]
----

We know that 1-10 will never change. It is immutable.
We know that 11-15 may change. It is mutable. They can be 0, 1 or empty array or have some data in it.


Player cards
------------

A player will be able to hold cards in their hand.

Each card will hold this information:

Card:
----------
| 1) CardID: <Int>
| 2) ProductionUnits: <Int>
| 3) SpentProductionUnits: <Int>
----
| 4) Color: <Color: Int>
| 5) Generation: <Generation: Int>
| 6) Cost: <Cost: Int> (to design the locomotive)
| 7) Production Cost: <ProductionCost: Int>
| 8) Income: <Income: Int>
----



-----

Card rules.

As previousily mentioned, there are 14 locomotives in the game and 43 cards.

A locomotive can be purchased if both:
* It has 1 die in the `initial orders`, or one or more dice in the `Existing Orders` boxes.
* It has an available locomotive card.  If there are no cards in the deck, then no locomotive can be purchased.
and
* If the player has enough coins to buy the card
* If the player hasn't already got this card in their hand.

Note: Each player may develop each locomotive only once.

If the player has already developed that locomotive, he may not develop it again.

For example, Pete already has a First Generation Green locomotive. He may not develop another First Generation Green locomotive.

A locomotive may be:
.inactive meaning it is not available for purchase. It is the default state.
.active meaning it has dice and cards in either initial orders, existing orders or customer base.
.rusted meaning it has no cards and no dice and this locomotive is now `obsolete`; there is no demand for this generation of that locomotive type anymore.

or it may have some amount of dice or cards

    case hasDiceWithCards // New case: 1 or more dice, some amount of cards (including zero)
    case hasDiceWithoutCards // New case: 1 or more dice, but no cards
    case noDiceWithCards // New case: 0 dice, some amount of cards (including zero)
    case noDiceWithoutCards // New case: 0 dice, no cards

---


